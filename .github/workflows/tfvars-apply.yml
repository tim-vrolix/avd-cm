# This is a basic workflow to help you get started with Actions

name: Terraform apply
env:
  PACK_NAME: xxx

  TERRAFORMSTATERESOURCEGROUP_DEV: "rg"
  BACKENDAZURERMSUB_DEV: "24380b0f-fd35-4966-816d-649e26aef48a"
  BACKENDAZURERMSTORAGEACCOUNTNAME_DEV: "terraform154"
  BACKENDAZURERMCONTAINERNAME_DEV: "tfstate-dev"
  TERRAFORMSTATEFILENAME_DEV: "Main-Parameters-dev.yml"

  # TERRAFORMSTATERESOURCEGROUP_PRD: xxx
  # BACKENDAZURERMSUB_PRD: xxx
  # BACKENDAZURERMSTORAGEACCOUNTNAME_PRD: xxx
  # BACKENDAZURERMCONTAINERNAME_PRD: xxx
  # TERRAFORMSTATEFILENAME_PRD: xxx

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "The Azure environment to target for the deployment."
        required: true
        type: choice
        options:
          - "dev"
          - "prd"
        default: "dev"

permissions:
  id-token: write
  contents: read

jobs:
  Build:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ inputs.environment }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v3
      - name: Set environment variables for environment ${{ env.ENVIRONMENT }}
        id: setenvs
        run: |
          if [[ ${{ env.ENVIRONMENT }} == "dev" ]]; then
            echo "Setting environment variables for DEV deployment.."
            echo "TERRAFORMSTATERESOURCEGROUP=${{ env.TERRAFORMSTATERESOURCEGROUP_DEV }}" >> $GITHUB_ENV
            echo "BACKENDAZURERMSUB=${{ env.BACKENDAZURERMSUB_DEV }}" >> $GITHUB_ENV
            echo "BACKENDAZURERMSTORAGEACCOUNTNAME=${{ env.BACKENDAZURERMSTORAGEACCOUNTNAME_DEV }}" >> $GITHUB_ENV
            echo "BACKENDAZURERMCONTAINERNAME=${{ env.BACKENDAZURERMCONTAINERNAME_DEV }}" >> $GITHUB_ENV
            echo "TERRAFORMSTATEFILENAME=${{ env.TERRAFORMSTATEFILENAME_DEV }}" >> $GITHUB_ENV
          elif [[ ${{ env.ENVIRONMENT }} == "prd" ]]; then
            echo "Setting environment variables for PRD deployment.."
            echo "TERRAFORMSTATERESOURCEGROUP=${{ env.TERRAFORMSTATERESOURCEGROUP_PRD }}" >> $GITHUB_ENV
            echo "BACKENDAZURERMSUB=${{ env.BACKENDAZURERMSUB_PRD }}" >> $GITHUB_ENV
            echo "BACKENDAZURERMSTORAGEACCOUNTNAME=${{ env.BACKENDAZURERMSTORAGEACCOUNTNAME_PRD }}" >> $GITHUB_ENV
            echo "BACKENDAZURERMCONTAINERNAME=${{ env.BACKENDAZURERMCONTAINERNAME_PRD }}" >> $GITHUB_ENV
            echo "TERRAFORMSTATEFILENAME=${{ env.TERRAFORMSTATEFILENAME_PRD }}" >> $GITHUB_ENV
          else
            echo "Chosen environment ${{ env.ENVIRONMENT }} is not supported. Exiting."
            exit 1
          fi
      - name: setup python 3.8
        uses: actions/setup-python@v4.0.0
        with:
          python-version: 3.8
      - name: Install python packaging tools
        run: python -m pip install --upgrade pip setuptools wheel
      - name: Install yaml parsing requirements
        run: pip install pykwalify==1.7.0 PyYAML==5.3.1
      - name: Validate parameter file for environment ${{ env.ENVIRONMENT }}
        run: python Convert-ParameterFile.py --parameter-file "Main-Parameters-${{ env.ENVIRONMENT }}.yml" --schema-file "Main-Parameters-Schema.yml"
    outputs:
      ENVIRONMENT: ${{ env.ENVIRONMENT }}
      TERRAFORMSTATERESOURCEGROUP: ${{ env.TERRAFORMSTATERESOURCEGROUP }}
      BACKENDAZURERMSUB: ${{ env.BACKENDAZURERMSUB }}
      BACKENDAZURERMSTORAGEACCOUNTNAME: ${{ env.BACKENDAZURERMSTORAGEACCOUNTNAME }}
      BACKENDAZURERMCONTAINERNAME: ${{ env.BACKENDAZURERMCONTAINERNAME }}
      TERRAFORMSTATEFILENAME: ${{ env.TERRAFORMSTATEFILENAME }}
      CLIENT_ID: ${{ env.CLIENT_ID }}
      TENANT_ID: ${{ env.TENANT_ID }}
      SUBSCRIPTION_ID: ${{ env.SUBSCRIPTION_ID }}

  ValidateBackend:
    runs-on: ubuntu-latest
    needs: Build
    env:
      ENVIRONMENT: ${{ needs.Build.outputs.ENVIRONMENT }}
      TERRAFORMSTATERESOURCEGROUP: ${{ needs.Build.outputs.TERRAFORMSTATERESOURCEGROUP }}
      BACKENDAZURERMSUB: ${{ needs.Build.outputs.BACKENDAZURERMSUB }}
      BACKENDAZURERMSTORAGEACCOUNTNAME: ${{ needs.Build.outputs.BACKENDAZURERMSTORAGEACCOUNTNAME }}
      TERRAFORMSTATEFILENAME: ${{ needs.Build.outputs.TERRAFORMSTATEFILENAME }}
      BACKENDAZURERMCONTAINERNAME: ${{ needs.Build.outputs.BACKENDAZURERMCONTAINERNAME }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v3
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Set PAL for service principal
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az extension add --name managementpartner -y
            if [[ $(az managementpartner show ) ]]; then
                echo "Updating partner ID.."
                az managementpartner update --partner-id 4973165
            else
                echo "Setting new partner ID.."
                az managementpartner create --partner-id 4973165
            fi
      - name: Check for Terraform state container
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            echo "ACCOUNT_KEY=$(az storage account keys list --resource-group ${{ env.TERRAFORMSTATERESOURCEGROUP }} --account-name ${{ env.BACKENDAZURERMSTORAGEACCOUNTNAME }} --query '[0].value' -o tsv)" >> $GITHUB_ENV
    outputs:
      ACCOUNT_KEY: ${{ env.ACCOUNT_KEY }}
  Apply:
    runs-on: ubuntu-latest
    needs:
      - Build
      - ValidateBackend
    env:
      ENVIRONMENT: ${{ needs.Build.outputs.ENVIRONMENT }}
      TERRAFORMSTATERESOURCEGROUP: ${{ needs.Build.outputs.TERRAFORMSTATERESOURCEGROUP }}
      BACKENDAZURERMSUB: ${{ needs.Build.outputs.BACKENDAZURERMSUB }}
      BACKENDAZURERMSTORAGEACCOUNTNAME: ${{ needs.Build.outputs.BACKENDAZURERMSTORAGEACCOUNTNAME }}
      TERRAFORMSTATEFILENAME: ${{ needs.Build.outputs.TERRAFORMSTATEFILENAME }}
      BACKENDAZURERMCONTAINERNAME: ${{ needs.Build.outputs.BACKENDAZURERMCONTAINERNAME }}
      ACCOUNT_KEY: ${{ needs.ValidateBackend.outputs.ACCOUNT_KEY }}
      ARM_CLIENT_ID: ${{ secrets[format('AZURE_CLIENT_ID_{0}', needs.Build.outputs.ENVIRONMENT )] }}
      ARM_CLIENT_SECRET: ${{ secrets[format('AZURE_CLIENT_SECRET_{0}', needs.Build.outputs.ENVIRONMENT )] }}
      ARM_SUBSCRIPTION_ID: ${{ secrets[format('AZURE_SUBSCRIPTION_ID_{0}', needs.Build.outputs.ENVIRONMENT )] }}
      ARM_TENANT_ID: ${{ secrets[format('AZURE_TENANT_ID_{0}', needs.Build.outputs.ENVIRONMENT )] }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v3
      - name: Install Terraform version 1.3.4
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.4
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="resource_group_name=${{ env.TERRAFORMSTATERESOURCEGROUP }}" -backend-config="storage_account_name=${{ env.BACKENDAZURERMSTORAGEACCOUNTNAME }}" -backend-config="container_name=${{ env.BACKENDAZURERMCONTAINERNAME }}" -backend-config="access_key=${{ env.ACCOUNT_KEY }}" -backend-config="key=${{ env.TERRAFORMSTATEFILENAME }}"
      - name: Replace tokens in variable file for environment ${{ env.ENVIRONMENT }}
        uses: cschleiden/replace-tokens@v1.1
        with:
          tokenPrefix: "{{"
          tokenSuffix: "}}"
          files: '["variables.tf"]'
        env:
          parameterenv: ${{ env.ENVIRONMENT }}
      - name: Terraform validate
        id: validate
        run: terraform validate
      - name: Terraform apply
        id: apply
        run: terraform apply --auto-approve